# /register

mutation Register($registerUserInput: RegisterUserInput!) {
  registerUser(registerUserInput: $registerUserInput)
}

# /loginForm

fragment LoggedInUser on UserWithToken {
  username
  token
}

mutation Login($credentials: Credentials!) {
  login(credentials: $credentials) {
    ...LoggedInUser
  }
}


# /

query MyGroups {
  myGroups {
    id
    name
    playerCount
  }
}

mutation GroupCreation($name: String!) {
  createGroup(name: $name)
}

# /groups/:groupId/...

query GroupBase($groupId: Int!) {
  group(groupId: $groupId) {
    name
  }
}

# /groups/:groupId/

fragment RuleSet on RuleSet {
  name
  basePrice
  soloPrice
  countLaufende
  minLaufendeIncl
  maxLaufendeIncl
  laufendePrice
  geierAllowed
  hochzeitAllowed
  bettelAllowed
  ramschAllowed
  farbWenzAllowed
  farbGeierAllowed
}

mutation NewRuleSet($groupId: Int!, $ruleSetInput: RuleSetInput!) {
  group(groupId: $groupId) {
    createRuleSet(ruleSetInput: $ruleSetInput)
  }
}

fragment Player on Player {
  nickname
  name
  balance
  gameCount
  playedGames
  putCount
  winCount
}

mutation PlayerCreation($groupId: Int!, $playerInput: PlayerInput!) {
  group(groupId: $groupId) {
    createPlayer(newPlayer: $playerInput)
  }
}


query Group($groupId: Int!) {
  group(groupId: $groupId) {
    name
    ruleSets {
      ...RuleSet
    }
    players {
      ...Player
    }
    sessions {
      id
      hasEnded
    }
  }
}





# /groups/:name/newSession

fragment NewSessionValuesGroup on Group {
  players {
    ...SessionPlayer
  }
  ruleSets {
    ...RuleSet
  }
}

query NewSessionValues($groupId: Int!) {
  group(groupId: $groupId) {
    ...NewSessionValuesGroup
  }
}

mutation NewSession($groupId: Int!, $sessionInput: SessionInput!) {
  group(groupId: $groupId) {
    newSession(sessionInput: $sessionInput)
  }
}

# /groups/:name/sessions/:sessionId

fragment SessionPlayer on Player {
  nickname
  name
}

fragment SessionGame on Game {
  id
  actingPlayerNickname
  gameType
  suit
  tout
  isDoubled
  laufendeCount
  schneiderSchwarz
  playersHavingPutNicknames
  kontra
  playersHavingWonNicknames
  price
}

fragment Session on Session {
  date
  games {
    ...SessionGame
  }
  ruleSet {
    ...RuleSet
  }
  firstPlayer {
    ...SessionPlayer
  }
  secondPlayer {
    ...SessionPlayer
  }
  thirdPlayer {
    ...SessionPlayer
  }
  fourthPlayer {
    ...SessionPlayer
  }
  hasEnded
}

query Session($groupId: Int!, $sessionId: Int!) {
  group(groupId: $groupId) {
    session(id: $sessionId) {
      ...Session
    }
  }
}

mutation CreateGame($groupId: Int!, $sessionId: Int!, $gameInput: GameInput!) {
  group(groupId: $groupId) {
    session(sessionId: $sessionId) {
      newGame(gameInput: $gameInput) {
        ...SessionGame
      }
    }
  }
}

mutation EndSession($groupId: Int!, $sessionId: Int!) {
  group(groupId: $groupId) {
    session(sessionId: $sessionId) {
      endSession
    }
  }

}
