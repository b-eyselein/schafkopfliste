# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: QueryRoot
  mutation: Mutations
}

type Game {
  actingPlayerNickname: String!
  gameType: GameType!
  id: Int!
  isDoubled: Boolean!
  kontra: KontraType
  laufendeCount: Int!
  playersHavingPutNicknames: [String!]!
  playersHavingWonNicknames: [String!]!
  price: Int!
  schneiderSchwarz: SchneiderSchwarz
  suit: BavarianSuit
  tout: Boolean!
}

type Group {
  name: String!
  playerCount: Int!
  players: [PlayerInGroup!]!
  ruleSet: RuleSet
  ruleSetName: String!
  sessions: [Session!]!
}

type Mutations {
  addPlayerToGroup(groupName: String!, newState: Boolean!, playerName: String!): Boolean!
  createGroup(groupInput: GroupInput!): Group!
  createPlayer(newPlayer: PlayerInput!): String!
  createRuleSet(ruleSetInput: RuleSetInput!): String!
  login(credentials: Credentials!): UserWithToken
  newGame(gameInput: GameInput!, groupName: String!, sessionId: Int!): Game!
  newSession(groupName: String!, sessionInput: SessionInput!): Int!
  registerUser(registerUserInput: RegisterUserInput!): String!
}

type Player {
  firstName: String!
  isMemberInGroup(groupName: String!): Boolean!
  lastName: String!
  nickname: String!
  pictureName: String
}

type PlayerInGroup {
  balance: Int!
  gameCount: Int!
  isActive: Boolean!
  name: String!
  nickname: String!
  playedGames: Int!
  putCount: Int!
  winCount: Int!
}

type QueryRoot {
  group(name: String!): Group
  groups: [Group!]!
  players: [Player!]!
  ruleSet(name: String!): RuleSet
  ruleSets: [RuleSet!]!
  session(groupName: String!, id: Int!): Session
}

type RuleSet {
  basePrice: Int!
  bettelAllowed: Boolean!
  countLaufende: CountLaufende!
  farbGeierAllowed: Boolean!
  farbWenzAllowed: Boolean!
  geierAllowed: Boolean!
  hochzeitAllowed: Boolean!
  laufendePrice: Int!
  maxLaufendeIncl: Int!
  minLaufendeIncl: Int!
  name: String!
  ramschAllowed: Boolean!
  soloPrice: Int!
}

type Session {
  date: String!
  firstPlayer: Player!
  fourthPlayer: Player!
  games: [Game!]!
  hasEnded: Boolean!
  id: Int!
  ruleSet: RuleSet!
  secondPlayer: Player!
  thirdPlayer: Player!
}

type UserWithToken {
  isAdmin: Boolean!
  playerNickname: String
  token: String!
  username: String!
}

enum BavarianSuit {
  ACORNS
  BELLS
  HEARTS
  LEAVES
}

enum CountLaufende {
  ALWAYS
  NEVER
  ONLY_LOSERS
}

enum GameType {
  BETTEL
  FARBGEIER
  FARBSOLO
  FARBWENZ
  GEIER
  HOCHZEIT
  RAMSCH
  RUF
  WENZ
}

enum KontraType {
  KONTRA
  RE
  RESUPRA
  SUPRA
}

enum SchneiderSchwarz {
  SCHNEIDER
  SCHWARZ
}

input Credentials {
  password: String!
  username: String!
}

input GameInput {
  actingPlayerNickname: String!
  gameType: GameType!
  isDoubled: Boolean!
  kontra: KontraType
  laufendeCount: Int!
  playersHavingPutNicknames: [String!]!
  playersHavingWonNicknames: [String!]!
  schneiderSchwarz: SchneiderSchwarz
  suit: BavarianSuit
  tout: Boolean!
}

input GroupInput {
  name: String!
  ruleSetName: String!
}

input PlayerInput {
  firstName: String!
  lastName: String!
  nickname: String!
  pictureName: String
}

input RegisterUserInput {
  password: String!
  passwordRepeat: String!
  username: String!
}

input RuleSetInput {
  basePrice: Int!
  bettelAllowed: Boolean!
  countLaufende: CountLaufende!
  farbGeierAllowed: Boolean!
  farbWenzAllowed: Boolean!
  geierAllowed: Boolean!
  hochzeitAllowed: Boolean!
  laufendePrice: Int!
  maxLaufendeIncl: Int!
  minLaufendeIncl: Int!
  name: String!
  ramschAllowed: Boolean!
  soloPrice: Int!
}

input SessionInput {
  dateDayOfMonth: Int!
  dateMonth: Int!
  dateYear: Int!
  firstPlayerNickname: String!
  fourthPlayerNickname: String!
  secondPlayerNickname: String!
  thirdPlayerNickname: String!
  timeHours: Int!
  timeMinutes: Int!
}
